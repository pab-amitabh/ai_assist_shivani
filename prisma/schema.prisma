// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  messages Message[]
  userId   String    @db.ObjectId
  user     User      @relation(fields: [userId], references: [id])
  archieve Boolean @default(false)
  chatType String @default("chatbot")
}

model Message {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  chatId     String  @db.ObjectId
  chat       Chat    @relation(fields: [chatId], references: [id])

  content     String
  sender      String
  messageType String
  createdAt   DateTime @default(now())

  isResolved Boolean @default(false) // Indicates if the question was AI generated
  rating     Int? // Rating for the answer
  reviewComments String?
  commentAddedAt DateTime?

  questionId String?  @db.ObjectId
  question   Message? @relation("QuestionAnswer", fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  answers    Message[] @relation("QuestionAnswer")

  reviewAdvisorComments String?
  reviewAdvisorCommentedOn DateTime?
  reviewerAction String?
  modelType String @default("chatbot")
}
